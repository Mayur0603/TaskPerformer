@model IEnumerable<TaskPerformer.Models.Todo>

@{
    ViewData["Title"] = "Todo-Task";
}
<header class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">📝 Todo-Task</h1>
    <a class="btn btn-outline-dark px-3 py-2 rounded-0 fw-semibold shadow-sm"
       asp-action="Create" title="Add New Task">
        ➕ Add New Task
    </a>
</header>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet">

<div class="d-flex flex-column flex-md-row justify-content-between align-items-center gap-3">

    
<!-- Anti-forgery token form -->
<form id="mainForm">@Html.AntiForgeryToken()</form>
    <!-- Search bar -->
    <form asp-action="Index" asp-controller="Todo" method="get" class="w-100 w-md-auto">
        <div class="input-group input-group-lg">
            <input type="hidden" name="tabfilter" value="@(ViewData["SelectedTab"])" />
            <input type="text" name="searchString"
                   class="form-control rounded-start-pill"
                   placeholder="🔍 Search by task title..."
                   value="@(ViewData["CurrentFilter"])" />
            <button class="btn btn-primary rounded-end-pill" type="submit">🔍</button>
        </div>
    </form>

</div>



<div class="btn-group m-4" role="group">
    <a class="btn btn-outline-primary @(ViewData["SelectedTab"]?.ToString() == "Today" ? "active" : "")"
       asp-action="Index" asp-route-tabfilter="Today">☀️ Today</a>

    <a class="btn btn-outline-secondary @(ViewData["SelectedTab"]?.ToString() == "Yesterday" ? "active" : "")"
       asp-action="Index" asp-route-tabfilter="Yesterday">🌙 Yesterday</a>

    <a class="btn btn-outline-info @(ViewData["SelectedTab"]?.ToString() == "Future" ? "active" : "")"
       asp-action="Index" asp-route-tabfilter="Future">📅 Future</a>
</div>

<!-- Dashboard Stats -->
<div class="row mb-4">
    <!-- Cards for Total, Completed, Pending -->
</div>

<table class="table table-hover table-striped shadow-sm border rounded text-center align-middle">
    <thead class="table-dark">
        <tr>
            <th scope="col">📌 Task</th>
            <th scope="col">📊 Status</th>
            <th scope="col">🕒 Created</th>
            <th scope="col">📅 Due</th>
            <th scope="col">✅ Completed</th>
            <th scope="col">⚙️ Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Item in Model)
        {
            var isExpired = Item.DueDate < DateTime.Today;
            <tr class="@(isExpired && !Item.IsCompleted ? "table-danger" : "")">
                <!-- Task -->
                <td class="text-start">
                    <span class="title-text fw-semibold @(Item.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                        @Item.Title
                    </span>
                    <input class="form-control form-control-sm title-input d-none mt-2" type="text" value="@Item.Title" @(isExpired ? "disabled" : "") />
                </td>

                <!-- Status -->
                <td>
                    @if (Item.IsCompleted)
                    {
                        <span class="badge bg-success"><i class="bi bi-check-circle-fill"></i> Done</span>
                    }
                    else if (isExpired)
                    {
                        <span class="badge bg-danger"><i class="bi bi-exclamation-circle"></i> Expired</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark"><i class="bi bi-hourglass-split"></i> Pending</span>
                    }
                </td>

                <!-- Dates -->
                <td>@Item.CreatedAt.ToString("dd MMM yyyy")</td>
                <td>@Item.DueDate.ToString("dd MMM yyyy")</td>
                <td>@Item.CompletedDate?.ToString("dd MMM yyyy")</td>

                <!-- Actions -->
                <td>
                    <div class="d-flex justify-content-center flex-wrap gap-1">
                        @if (!Item.IsCompleted && !isExpired)
                        {
                            <button class="btn btn-sm btn-outline-primary edit-btn" onclick="editRow(this)" title="Edit">
                                <i class="bi bi-pencil-square"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-success save-btn d-none" onclick="saveRow(this, @Item.Id)" title="Save">
                                <i class="bi bi-save"></i>
                            </button>

                            <form asp-action="Complete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@Item.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-success" title="Mark Complete">
                                    <i class="bi bi-check-lg"></i>
                                </button>
                            </form>

                            <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Delete this task?');">
                                <input type="hidden" name="id" value="@Item.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        }
                        else if (Item.IsCompleted)
                        {
                            <form asp-action="Incomplete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@Item.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-warning" title="Mark Incomplete">
                                    <i class="bi bi-arrow-counterclockwise"></i>
                                </button>
                            </form>

                            <button type="button" class="btn btn-sm btn-outline-info" data-bs-toggle="modal" data-bs-target="#detailsModal-@Item.Id" title="View Details">
                                <i class="bi bi-eye"></i>
                            </button>

                            <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Delete this completed task?');">
                                <input type="hidden" name="id" value="@Item.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        }
                        else
                        {
                            <span class="text-muted small"><i class="bi bi-calendar-x"></i> Expired</span>
                        }
                    </div>
                </td>
            </tr>

            <!-- Modal for View Details -->
            <div class="modal fade" id="detailsModal-@Item.Id" tabindex="-1" aria-labelledby="detailsModalLabel-@Item.Id" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-md">
                    <div class="modal-content shadow border-0 rounded-3">
                        <div class="modal-header bg-dark text-white">
                            <h5 class="modal-title fw-semibold" id="detailsModalLabel-@Item.Id">📋 Task Details</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body bg-light-subtle px-4 py-3">
                            <ul class="list-unstyled lh-lg mb-0">
                                <li><strong>🆔 ID:</strong> @Item.Id</li>
                                <li><strong>📝 Title:</strong> @Item.Title</li>
                                <li><strong>📄 Description:</strong> @Item.Discription</li>
                                <li><strong>📅 Due Date:</strong> @Item.DueDate.ToString("dd MMM yyyy")</li>
                                <li><strong>📆 Created At:</strong> @Item.CreatedAt.ToString("dd MMM yyyy")</li>
                                @if (Item.CompletedDate != null)
                                {
                                    <li><strong>✅ Completed:</strong> @Item.CompletedDate?.ToString("dd MMM yyyy")</li>
                                }
                                <li>
                                    <strong>📊 Status:</strong>
                                    @if (Item.IsCompleted)
                                    {
                                        <span class="badge bg-success">Completed</span>
                                    }
                                    else if (Item.DueDate < DateTime.Today)
                                    {
                                        <span class="badge bg-danger">Expired</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Pending</span>
                                    }
                                </li>
                            </ul>
                        </div>

                        <div class="modal-footer bg-light border-top-0">
                            <button class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

        }
    </tbody>
</table>

<a href="@Url.Action("Dashboard", "Home")" class="btn btn-primary">Back to Dashboard</a>


@section Scripts {
    <script>
               function editRow(btn) {
            const row = btn.closest('tr');
            console.log('row:', row);
            const titleText = row.querySelector('.title-text');
            const titleInput = row.querySelector('.title-input');
            const saveBtn = row.querySelector('.save-btn');
            console.log('saveBtn:', saveBtn);

            titleText.classList.add('d-none');
            titleInput.classList.remove('d-none');

            btn.classList.add('d-none');
            saveBtn.classList.remove('d-none');
        }



        function saveRow(btn, id) {
            const row = btn.closest('tr');
            const titleText = row.querySelector('.title-text');
            const titleInput = row.querySelector('.title-input');
            const newTitle = titleInput.value.trim();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            if (!newTitle) {
                alert("Title cannot be empty.");
                return;
            }

            fetch('/Todo/UpdateTitle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ id: id, title: newTitle })
            })
            .then(response => {
                if (response.ok) {
                    titleText.innerText = newTitle;
                    titleText.classList.remove('d-none');
                    titleInput.classList.add('d-none');

                           row.querySelector('.save-btn').classList.add('d-none');
                           row.querySelector('.edit-btn').classList.remove('d-none');
                } else {
                    alert("Failed to save changes.");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Something went wrong.");
            });
        }
    </script>
}
